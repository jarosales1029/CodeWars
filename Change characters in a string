'''Deoxyribonucleic acid (DNA) is a chemical found in the nucleus of cells and carries the "instructions" for the development and functioning of living organisms.

If you want to know more http://en.wikipedia.org/wiki/DNA

In DNA strings, symbols "A" and "T" are complements of each other, as "C" and "G". You have function with one side of the DNA (string, except for Haskell); you need to get the other complementary side. DNA strand is never empty or there is no DNA at all (again, except for Haskell).

More similar exercise are found here http://rosalind.info/problems/list-view/ (source)'''

DNA_strand ("ATTGC") # return "TAACG"

DNA_strand ("GTAT") # return "CATA"

SAMPLE TESTs:
Test.assert_equals(DNA_strand("AAAA"),"TTTT","String AAAA is")
Test.assert_equals(DNA_strand("ATTGC"),"TAACG","String ATTGC is")
Test.assert_equals(DNA_strand("GTAT"),"CATA","String GTAT is")

def DNA_strand(dna):
    # code here

import string
def DNA_strand(dna):
    return dna.translate(string.maketrans("ATCG","TAGC"))
    # Python 3.4 solution || you don't need to import anything :)
    # return dna.translate(str.maketrans("ATCG","TAGC"))

pairs = {'A':'T','T':'A','C':'G','G':'C'}
def DNA_strand(dna):
    return ''.join([pairs[x] for x in dna])

def DNA_strand(dna):
    reference = { "A":"T",
                  "T":"A",
                  "C":"G",
                  "G":"C"
                  }
    return "".join([reference[x] for x in dna])

import string

def DNA_strand(dna):
    return dna.translate(string.maketrans('ATCG', 'TAGC'))

def DNA_strand(dna):
    # code here
    dnaComplement=""
    for string in dna:
        if string=="A":
            dnaComplement+="T"
        elif string =="T":
            dnaComplement+="A"
        elif string =="G":
            dnaComplement+="C"
        elif string == "C":
            dnaComplement+="G"
    return dnaComplement

def DNA_strand(dna):
  return "".join([{'A':'T', 'T':'A', 'C':'G', 'G':'C'}[l] for l in dna])

import string

TABLE = string.maketrans('ATCG', 'TAGC')


def DNA_strand(dna):
    return dna.translate(TABLE)


from string import maketrans
def DNA_strand(dna):
    return dna.translate(maketrans('ATCG', 'TAGC'))


def DNA_strand(dna):
    return ''.join([{'A': 'T', 'T': 'A', 'G': 'C', 'C': 'G'}[letter] for letter in dna])


def DNA_strand(dna):
    return dna.translate(dna.maketrans("ATCG", "TAGC"))


DNA_strand = lambda dna: ''.join(['ACGT'[-1 * ('ACGT'.index(l) + 1)] for l in dna])


# This code take any length of string ATGC and converts it accordingly
def DNA_strand(dna):
    # Here we have taken a variable i so that we can use dna String as a list and do necessary action
    i = 0
    # Here we have defined new string variable which is used to store the data from computation
    new_dna = ""
    # A while loop is executing till the last index is not acheived
    while i < len(dna):
        if dna[i] == 'A':
            new_dna = new_dna + 'T'
            i += 1
        elif dna[i] == 'T':
            new_dna = new_dna + 'A'
            i += 1
        elif dna[i] == 'C':
            new_dna = new_dna + 'G'
            i += 1
        else:
            new_dna = new_dna + 'C'
            i += 1
    return new_dna
